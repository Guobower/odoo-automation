---
  - name: Install correct version docker-py to avoid problems
    pip: name=docker-py version=1.9.0

  - name: Check the odoo postgres user has the same password
    become: yes
    become_user: postgres
    postgresql_user:
      name: "{{ pg_user }}"
      password: "{{ pg_password }}"
      role_attr_flags: CREATEDB,NOSUPERUSER
      state: present
      port: "{{ pg_port }}"

  - name: Create DB (if necessary)
    become: yes
    become_user: postgres
    postgresql_db:
        name: "{{ item }}"
        owner: "{{ pg_user }}"
        state: present
        template: "template0"
        port: "{{ pg_port }}"
    register: dbstatus
    with_items: "{{ databases }}"

  - name: Atualiza a imagem do Odoo
    become: yes
    become_user: odoo
    docker_image:
      name: trustcode/docker-odoo
      force: yes

  - name: Deleta o docker odoo de update
    become: yes
    become_user: odoo
    docker_container:
      name: "trustcode-update-odoo-{{ item }}"
      state: absent
    with_items: "{{ databases }}"

  - name: Inicia o docker odoo e inicializa a base de dados
    become: yes
    become_user: odoo
    command: "docker run --name trustcode-update-odoo-{{ item }} --net host trustcode/docker-odoo /usr/bin/odoo-server -c /etc/odoo/odoo.conf -d {{ item }} -i br_base -r {{ pg_user }} --db_port {{ pg_port }} -w {{ pg_password }} --without-demo=all --stop-after-init"
    when: dbstatus.changed
    with_items: "{{ databases }}"

  - name: Inicia o docker odoo em modo atualizacao
    become: yes
    become_user: odoo
    command: "docker run --name trustcode-update-odoo-{{ item }} --net host trustcode/docker-odoo /usr/bin/odoo-server -c /etc/odoo/odoo.conf -d {{ item }} -u {{ module_update }} -r {{ pg_user }} --db_port {{ pg_port }} -w {{ pg_password }} --without-demo=all --stop-after-init"
    when: module_update != "" and not dbstatus.changed
    with_items: "{{ databases }}"

  - name: Cria a pasta dados
    become: yes
    become_user: root
    file: path=/opt/dados/{{ item.key }} state=directory mode=0755 owner=odoo
    with_dict: "{{ docker }}"

  - name: Recria o docker odoo
    become: yes
    become_user: odoo
    docker_container:
      name: trustcode-odoo-{{ item.key }}
      image: trustcode/docker-odoo
      network_mode: host
      restart: yes
      state: started
      recreate: yes
      volumes:
        - "/opt/dados/{{ item.key }}:/opt/dados"
      env:
        PG_PORT: "{{ pg_port }}"
        PG_USER: "{{ pg_user }}"
        PG_PASSWORD: "{{ pg_password }}"
        PORT: "{{ item.value.porta }}"
    with_dict: "{{ docker }}"

  - name: Modifica a senha padrão
    become: yes
    become_user: odoo
    command: "docker exec -u root trustcode-odoo-{{ item.key }} sed -i 's/senha_admin/{{ item.value.admin_password }}/' /etc/odoo/odoo.conf"
    when: inventory_hostname in groups['producao']
    with_dict: "{{ docker }}"

  - name: Adicionando dbfilter ao arquivo de configuração
    become: yes
    become_user: odoo
    command: docker exec -u root trustcode-odoo-{{ item.key }} bash -c "echo 'dbfilter = ^%d' >> /etc/odoo/odoo.conf"
    when: inventory_hostname in groups['trustcode']
    with_dict: "{{ docker }}"

  - name: Reinicia o odoo via supervisor para pegar nova senha
    become: yes
    become_user: odoo
    command: "docker exec trustcode-odoo-{{ item.key }} supervisorctl restart odoo"
    when: inventory_hostname in groups['producao']
    with_dict: "{{ docker }}"

  - name: Nginx | Criar configuracao
    template:
      src: "nginx-ssl.j2"
      dest: "/etc/nginx/sites-available/{{ item.key }}"
      owner: root
      group: root
      mode: 0755
    with_dict: "{{ databases }}"
    when: inventory_hostname in groups['producao']

  - name: Nginx | Link para habilitar o site
    file:
      src: "/etc/nginx/sites-available/{{ item.key }}"
      dest: "/etc/nginx/sites-enabled/{{ item.key }}"
      state: link
    with_dict: "{{ databases }}"
    when: inventory_hostname in groups['producao']

  - name: Nginx | Assegurar que Nginx esta instalado (package)
    service:
      name: nginx
      state: restarted
    when: inventory_hostname in groups['producao']

  - set_fact:
      tmp_item: '{{ item.value.domain }}'
    with_dict: "{{ databases }}"
    register: tmp_list

  - name: Print pg user
    debug:
        msg: "{{ ','.join(tmp_list.results | sum(attribute='ansible_facts.tmp_item', start=[]) | list) }}"

  - name: Certbot - Busca certificados digitais para os dominios
    become: yes
    become_user: root
    command: "certbot --nginx -n --expand --agree-tos --redirect -d {{ ','.join(tmp_list.results | sum(attribute='ansible_facts.tmp_item', start=[]) | list) }}"
